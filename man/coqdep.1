.TH COQ 1

.SH NAME
coqdep \- Compute inter-module dependencies for Coq and Caml programs

.SH SYNOPSIS
.B coqdep
[
.BI \-I \ directory
]
[
.BI \-coqlib \ directory
]
[
.BI \-i
]
[
.BI \-slash
]
.I filename ...
.I directory ...

.SH DESCRIPTION

.B coqdep
compute inter-module dependencies for Coq and Caml programs,
and prints the dependencies on the standard output in a format
readable by make.
When a directory is given as argument, it is recursively looked at.

Dependencies of Coq modules are computed by looking at
.IR Require \&
commands (Require, Require Export, Require Import),
.IR Declare \&
.IR ML \&
.IR Module \&
commands and
.IR Load \&
commands. Dependencies relative to modules from the Coq library are not
printed except if
.BR \-boot \&
is given.

Dependencies of Caml modules are computed by looking at
.IR open \&
directives and the dot notation
.IR module.value \&.

.SH OPTIONS

.TP
.BI \-f \ file
Read filenames and options -I, -R and -Q from a _CoqProject FILE.
.TP
.BI \-I/\-Q/\-R \ options
Have the same effects on load path and modules names as for other
coq commands (coqtop, coqc).
.TP
.BI \-coqlib \ directory
Indicates where is the Coq library. The default value has been
determined at installation time, and therefore this option should not
be used under normal circumstances.
.TP
.BI \-exclude-dir \ dir
Skips subdirectory
.IR dir \ during
.BR -R/-Q \ search.
.TP
.B \-sort
Output the given file name ordered by dependencies.
.TP
.B \-vos
Output dependencies for .vos files (this is not the default as it breaks dune's Coq mode)
.TP
.B \-boot
For coq developers, prints dependencies over coq library files
(omitted by default).
.TP 
.B \-compute_missing
If coqdep cannot find any physical .v or .vo file matching a Require Import
of a logical path, say L, coqdep will compute the expected physical path
of the .vo file corresponding to L based on the -R/-Q directives and $(COQPATH).
That .vo file will be added as a dependency. This is useful, for example,
when the corresponding .v file should be lazily autogenerated, only when needed
by another .v file, say N.v, e.g. in a fast partial build just to interactively
edit N.v.
In such cases, the autogenerated .v files should not be added to _CoqProject
because those files are required to be eagerly present before coqdep gets invoked.
Because the contents of the autogenerated .v file are not known, it is the user's
responsibility to add rules to Makefile.local to compile
those autogenerated .v files to .vo files.
Require Imports of missing files should be fully qualified and satisfy the following
condition: Suppose a file /d1/d2/d3..dn/f.v is missing and
directories dk/../dn also don't exist.
The user needs to make sure their -R/-Q directives are such that if any logical
path L corresponds to /d1/d2/..dk-1, no other physical path (say O) corresponds to L.
Otherwise coqdep may incorrectly add a dependency on the file O/dk/../dn/f.v





.SH SEE ALSO

.BR ocamlc (1),
.BR coqc (1),
.BR make (1).
.br

.SH NOTES

Lexers (for Coq and Caml) correctly handle nested comments
and strings.

The treatment of symbolic links is primitive.

If two files have the same name, in two different directories,
a warning is printed on standard error.

There is no way to limit the scope of the recursive search for
directories.

.SH EXAMPLES

.LP
Consider the files (in the same directory):

	A.ml B.ml C.ml D.ml X.v Y.v and Z.v

where
.TP
.BI \+
D.ml contains the commands `open A', `open B' and `type t = C.t' ;
.TP
.BI \+
Y.v contains the command `Require X' ;
.TP
.BI \+
Z.v contains the commands `Require X' and `Declare ML Module "D"'.
.LP
To get the dependencies of the Coq files:
.IP
.B
example% coqdep \-I . *.v
.RS
.sp .5
.nf
.B Z.vo: Z.v ./X.vo ./D.cmo
.B Y.vo: Y.v ./X.vo
.B X.vo: X.v
.fi
.RE
.br
.ne 7
.LP
With a warning:
.IP
.B
example% coqdep \-I . *.v
.RS
.sp .5
.nf
.B Z.vo: Z.v ./X.vo ./D.cmo
.B Y.vo: Y.v ./X.vo
.B X.vo: X.v
### Warning : In file Z.v, the ML modules declaration should be
### Declare ML Module "A" "B" "C" "D".
.fi
.RE
.br

.SH BUGS

Please report any bug to
.B https://github.com/coq/coq/issues
